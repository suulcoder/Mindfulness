{"ast":null,"code":"import { combineReducers } from 'redux';\nimport * as types from '../types/events';\n\nconst byId = (state = {}, action) => {\n  switch (action.type) {\n    case types.event_added:\n      return { ...state,\n        [action.payload.id]: action.payload\n      };\n\n    case types.event_deleted:\n      const currState = state;\n      delete currState[action.payload];\n      return currState;\n\n    default:\n      return state;\n  }\n};\n\nconst order = (state = [], action) => {\n  switch (action.type) {\n    case types.event_added:\n      return [...state, action.payload.id];\n\n    case types.event_deleted:\n      return state.filter(id => id !== action.payload);\n\n    default:\n      return state;\n  }\n};\n\nconst events = combineReducers({\n  byId,\n  order\n});\nexport default events;\nexport const getEvent = (state, id) => state.byId[id];\nexport const getAllEvents = state => state.order.map(id => getEvent(state, id)).filter(event => event != null);\nexport const getEventsbyBaby = (state, baby) => state.order.reverse().map(id => {\n  const currEvent = getEvent(state, id);\n\n  if (currEvent[Object.keys(currEvent)[4]] === baby) {\n    return currEvent;\n  }\n\n  return null;\n}).filter(event => event != null);","map":{"version":3,"sources":["/home/thecoder/Documentos/UVG/mindfulness/Examen/Mindfulness/src/reducers/events.js"],"names":["combineReducers","types","byId","state","action","type","event_added","payload","id","event_deleted","currState","order","filter","events","getEvent","getAllEvents","map","event","getEventsbyBaby","baby","reverse","currEvent","Object","keys"],"mappings":"AAAA,SAASA,eAAT,QAAgC,OAAhC;AACA,OAAO,KAAKC,KAAZ,MAAuB,iBAAvB;;AAEA,MAAMC,IAAI,GAAG,CAACC,KAAK,GAAC,EAAP,EAAUC,MAAV,KAAqB;AAC9B,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKJ,KAAK,CAACK,WAAX;AACI,aAAO,EAAC,GAAGH,KAAJ;AAAU,SAACC,MAAM,CAACG,OAAP,CAAeC,EAAhB,GAAoBJ,MAAM,CAACG;AAArC,OAAP;;AACJ,SAAKN,KAAK,CAACQ,aAAX;AACI,YAAMC,SAAS,GAAGP,KAAlB;AACA,aAAOO,SAAS,CAACN,MAAM,CAACG,OAAR,CAAhB;AACA,aAAOG,SAAP;;AACJ;AACI,aAAOP,KAAP;AARR;AAUH,CAXD;;AAaA,MAAMQ,KAAK,GAAG,CAACR,KAAK,GAAC,EAAP,EAAUC,MAAV,KAAqB;AAC/B,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKJ,KAAK,CAACK,WAAX;AACI,aAAO,CAAC,GAAGH,KAAJ,EAAUC,MAAM,CAACG,OAAP,CAAeC,EAAzB,CAAP;;AACJ,SAAKP,KAAK,CAACQ,aAAX;AACI,aAAON,KAAK,CAACS,MAAN,CAAaJ,EAAE,IAAEA,EAAE,KAAGJ,MAAM,CAACG,OAA7B,CAAP;;AACJ;AACI,aAAOJ,KAAP;AANR;AAQH,CATD;;AAWA,MAAMU,MAAM,GAAGb,eAAe,CAAC;AAC3BE,EAAAA,IAD2B;AAE3BS,EAAAA;AAF2B,CAAD,CAA9B;AAKA,eAAeE,MAAf;AAEA,OAAO,MAAMC,QAAQ,GAAG,CAACX,KAAD,EAAOK,EAAP,KAAcL,KAAK,CAACD,IAAN,CAAWM,EAAX,CAA/B;AACP,OAAO,MAAMO,YAAY,GAAIZ,KAAD,IAAWA,KAAK,CAACQ,KAAN,CAAYK,GAAZ,CACnCR,EAAE,IAAEM,QAAQ,CAACX,KAAD,EAAOK,EAAP,CADuB,EAEjCI,MAFiC,CAE1BK,KAAK,IAAEA,KAAK,IAAE,IAFY,CAAhC;AAGP,OAAO,MAAMC,eAAe,GAAG,CAACf,KAAD,EAAOgB,IAAP,KAAgBhB,KAAK,CAACQ,KAAN,CAAYS,OAAZ,GAAsBJ,GAAtB,CAA0BR,EAAE,IAAI;AAC3E,QAAMa,SAAS,GAAGP,QAAQ,CAACX,KAAD,EAAOK,EAAP,CAA1B;;AACA,MAAGa,SAAS,CAACC,MAAM,CAACC,IAAP,CAAYF,SAAZ,EAAuB,CAAvB,CAAD,CAAT,KAAuCF,IAA1C,EAA+C;AAC3C,WAAOE,SAAP;AACH;;AACD,SAAO,IAAP;AACC,CAN0C,EAMxCT,MANwC,CAMjCK,KAAK,IAAEA,KAAK,IAAE,IANmB,CAAxC","sourcesContent":["import { combineReducers } from 'redux';\nimport * as types from '../types/events'\n\nconst byId = (state={},action) => {\n    switch (action.type) {\n        case types.event_added:\n            return {...state,[action.payload.id]:action.payload}\n        case types.event_deleted:\n            const currState = state\n            delete currState[action.payload]\n            return currState\n        default:\n            return state\n    }\n}\n\nconst order = (state=[],action) => {\n    switch (action.type) {\n        case types.event_added:\n            return [...state,action.payload.id]\n        case types.event_deleted:\n            return state.filter(id=>id!==action.payload)\n        default:\n            return state\n    }\n}\n\nconst events = combineReducers({\n    byId,\n    order,\n})\n\nexport default events\n\nexport const getEvent = (state,id) => state.byId[id]\nexport const getAllEvents = (state) => state.order.map(\n    id=>getEvent(state,id)\n    ).filter(event=>event!=null)\nexport const getEventsbyBaby = (state,baby) => state.order.reverse().map(id => {\n    const currEvent = getEvent(state,id)\n    if(currEvent[Object.keys(currEvent)[4]]===baby){\n        return currEvent\n    }\n    return null\n    }).filter(event=>event!=null)"]},"metadata":{},"sourceType":"module"}